/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ModusButton {
        /**
          * (optional) Disables the button
         */
        "disabled": boolean;
        /**
          * (optional) The size of the button
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * (optional) The type of button
         */
        "type": 'cta' | 'default' | 'primary' | 'secondary' | 'warning';
    }
    interface ModusCheckbox {
        /**
          * (optional) Whether the checkbox is checked.
         */
        "checked": boolean;
        /**
          * (optional) Whether the checkbox is disabled.
         */
        "disabled": boolean;
        /**
          * (optional) The checkbox label.
         */
        "label": string;
        /**
          * (optional) The size of the button
         */
        "size": 'small' | 'medium';
    }
    interface ModusDropdown {
        /**
          * (optional) Disables the dropdown
         */
        "disabled": boolean;
        /**
          * (optional) The placement of the dropdown in related to the toggleElement
         */
        "placement": 'top' | 'right' | 'bottom' | 'left';
        /**
          * (required) The element id that the list renders near and that triggers the toggling of the list
         */
        "toggleElementId": string;
    }
    interface ModusList {
    }
    interface ModusListItem {
        /**
          * (optional) Disables the list item
         */
        "disabled": boolean;
        /**
          * (optional) The selected state of the list item
         */
        "selected": boolean;
        /**
          * (optional) The size of list item
         */
        "size": 'condensed' | 'standard';
        /**
          * (optional) The type of list item
         */
        "type": 'standard';
    }
    interface ModusTextInput {
        /**
          * (optional) Whether the text input has a clear button.
         */
        "clearable": boolean;
        /**
          * (optional) Whether the text input is disabled.
         */
        "disabled": boolean;
        /**
          * (optional) The text input's error text.
         */
        "error": string;
        /**
          * (optional) Whether the search icon is included.
         */
        "includeSearchIcon": boolean;
        /**
          * (optional) The text input label.
         */
        "label": string;
        /**
          * (optional) The text input placeholder text.
         */
        "placeholder": string;
        /**
          * (optional) Whether the input is required.
         */
        "required": boolean;
        /**
          * (optional) The text input value.
         */
        "value": string;
    }
}
declare global {
    interface HTMLModusButtonElement extends Components.ModusButton, HTMLStencilElement {
    }
    var HTMLModusButtonElement: {
        prototype: HTMLModusButtonElement;
        new (): HTMLModusButtonElement;
    };
    interface HTMLModusCheckboxElement extends Components.ModusCheckbox, HTMLStencilElement {
    }
    var HTMLModusCheckboxElement: {
        prototype: HTMLModusCheckboxElement;
        new (): HTMLModusCheckboxElement;
    };
    interface HTMLModusDropdownElement extends Components.ModusDropdown, HTMLStencilElement {
    }
    var HTMLModusDropdownElement: {
        prototype: HTMLModusDropdownElement;
        new (): HTMLModusDropdownElement;
    };
    interface HTMLModusListElement extends Components.ModusList, HTMLStencilElement {
    }
    var HTMLModusListElement: {
        prototype: HTMLModusListElement;
        new (): HTMLModusListElement;
    };
    interface HTMLModusListItemElement extends Components.ModusListItem, HTMLStencilElement {
    }
    var HTMLModusListItemElement: {
        prototype: HTMLModusListItemElement;
        new (): HTMLModusListItemElement;
    };
    interface HTMLModusTextInputElement extends Components.ModusTextInput, HTMLStencilElement {
    }
    var HTMLModusTextInputElement: {
        prototype: HTMLModusTextInputElement;
        new (): HTMLModusTextInputElement;
    };
    interface HTMLElementTagNameMap {
        "modus-button": HTMLModusButtonElement;
        "modus-checkbox": HTMLModusCheckboxElement;
        "modus-dropdown": HTMLModusDropdownElement;
        "modus-list": HTMLModusListElement;
        "modus-list-item": HTMLModusListItemElement;
        "modus-text-input": HTMLModusTextInputElement;
    }
}
declare namespace LocalJSX {
    interface ModusButton {
        /**
          * (optional) Disables the button
         */
        "disabled"?: boolean;
        /**
          * (optional) An event that fires on button click
         */
        "onButtonClick"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * (optional) The type of button
         */
        "type"?: 'cta' | 'default' | 'primary' | 'secondary' | 'warning';
    }
    interface ModusCheckbox {
        /**
          * (optional) Whether the checkbox is checked.
         */
        "checked"?: boolean;
        /**
          * (optional) Whether the checkbox is disabled.
         */
        "disabled"?: boolean;
        /**
          * (optional) The checkbox label.
         */
        "label"?: string;
        /**
          * An event that fires on checkbox click.
         */
        "onCheckboxClick"?: (event: CustomEvent<boolean>) => void;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'medium';
    }
    interface ModusDropdown {
        /**
          * (optional) Disables the dropdown
         */
        "disabled"?: boolean;
        /**
          * An event that fires on dropdown close
         */
        "onDropdownClose"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) The placement of the dropdown in related to the toggleElement
         */
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
        /**
          * (required) The element id that the list renders near and that triggers the toggling of the list
         */
        "toggleElementId"?: string;
    }
    interface ModusList {
    }
    interface ModusListItem {
        /**
          * (optional) Disables the list item
         */
        "disabled"?: boolean;
        /**
          * An event that fires on list item click
         */
        "onItemClick"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) The selected state of the list item
         */
        "selected"?: boolean;
        /**
          * (optional) The size of list item
         */
        "size"?: 'condensed' | 'standard';
        /**
          * (optional) The type of list item
         */
        "type"?: 'standard';
    }
    interface ModusTextInput {
        /**
          * (optional) Whether the text input has a clear button.
         */
        "clearable"?: boolean;
        /**
          * (optional) Whether the text input is disabled.
         */
        "disabled"?: boolean;
        /**
          * (optional) The text input's error text.
         */
        "error"?: string;
        /**
          * (optional) Whether the search icon is included.
         */
        "includeSearchIcon"?: boolean;
        /**
          * (optional) The text input label.
         */
        "label"?: string;
        /**
          * An event that fires on text input value change.
         */
        "onValueChange"?: (event: CustomEvent<string>) => void;
        /**
          * (optional) The text input placeholder text.
         */
        "placeholder"?: string;
        /**
          * (optional) Whether the input is required.
         */
        "required"?: boolean;
        /**
          * (optional) The text input value.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "modus-button": ModusButton;
        "modus-checkbox": ModusCheckbox;
        "modus-dropdown": ModusDropdown;
        "modus-list": ModusList;
        "modus-list-item": ModusListItem;
        "modus-text-input": ModusTextInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "modus-button": LocalJSX.ModusButton & JSXBase.HTMLAttributes<HTMLModusButtonElement>;
            "modus-checkbox": LocalJSX.ModusCheckbox & JSXBase.HTMLAttributes<HTMLModusCheckboxElement>;
            "modus-dropdown": LocalJSX.ModusDropdown & JSXBase.HTMLAttributes<HTMLModusDropdownElement>;
            "modus-list": LocalJSX.ModusList & JSXBase.HTMLAttributes<HTMLModusListElement>;
            "modus-list-item": LocalJSX.ModusListItem & JSXBase.HTMLAttributes<HTMLModusListItemElement>;
            "modus-text-input": LocalJSX.ModusTextInput & JSXBase.HTMLAttributes<HTMLModusTextInputElement>;
        }
    }
}
